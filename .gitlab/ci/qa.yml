# -- Quality Assurance

spec:
  inputs:
    stage:
      default: test
      description: The stage in which to run the job
      type: string
    enable_mr_pipelines:
      default: true
      description: Whether to enable merge request pipelines
      type: boolean

---

include:
  - local: .gitlab/ci/uv.yml

  - component: gitlab.com/components/dependency-scanning/main@~latest
    inputs:
      job_name: dependency-scanning
      stage: $[[ inputs.stage ]]
      allow_failure: true

  - component: gitlab.com/components/sast/sast@f6a5077c4ebd85a087ea0a15ab2113d52ef8e77e
    inputs:
      enable_mr_pipelines: $[[ inputs.enable_mr_pipelines ]]
      run_advanced_sast: true
      stage: $[[ inputs.stage ]]

.qa:
  stage: $[[ inputs.stage ]]

.sast-analyzer:
  needs: []

uv-lock:
  extends: .uv
  stage: .pre
  script:
    - uv lock --resolution lowest-direct
  artifacts:
    paths:
      - uv.lock

dependency-scanning:
  needs: [uv-lock]
  rules:
    # Only run if dependency scanning is enabled
    - if: '$GITLAB_FEATURES =~ /\bdependency_scanning\b/'

ruff:
  extends:
    - .qa
  image: ghcr.io/astral-sh/ruff:0.12.10-alpine
  script:
    - ruff check . --exit-zero
    - ruff check . --exit-zero --output-format gitlab --output-file gl-ruff.json
  artifacts:
    reports:
      codequality: gl-ruff.json

mypy:
  extends:
    - .qa
  image: quay.io/lib/python
  script:
    - python -m pip install mypy mypy-gitlab-code-quality
    - mypy
          --install-types
          --non-interactive
          .
      || exitcode="$?"
    # run mypy again and format as code quality report
    - mypy --no-error-summary .
      | mypy-gitlab-code-quality > gl-mypy-code-quality.json || true
    # propagate fatal exitcode
    - if [ "${exitcode:-0}" -gt 1 ]; then exit ${exitcode}; fi
  artifacts:
    reports:
      codequality: gl-mypy-code-quality.json
