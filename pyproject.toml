# -- build --------

[build-system]
requires = [
  "setuptools>=61.0",
  "setuptools_scm>=3.4.3",
  "wheel",
]
build-backend = "setuptools.build_meta"

# -- metadata -----

[project]
name = "pip2conda"
description = "Translate pip requirements into conda requirements"
readme = "README.md"
authors = [
  { name = "Duncan Macleod", email = "duncanmmacleod@gmail.com" },
]
license = { text = "GPL-3.0-or-later" }
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development",
  "Topic :: Software Development :: Build Tools",
  "Topic :: Software Development :: Testing",
]

# requirements:
requires-python = ">=3.10"
dependencies = [
  "build >= 1.0.0",
  "grayskull >=1.0.0",
  "requests >= 2.32.5",
  "ruamel.yaml >= 0.18.15",
  "packaging >= 25.0",
  "tomli >= 2.2.1; python_version < '3.11'",
  "wheel >= 0.45.1",
]

# dynamic properties set by tools:
dynamic = [
  "version",
]

[dependency-groups]
docs = [
  "furo",
  "myst-parser >= 4.0.1",
  "Sphinx >= 8.1.0",
  "sphinx-copybutton",
  "sphinx_rtd_theme >= 3.0.2",
]
test = [
  "pytest >= 8.4.1",
  "pytest-cov >= 6.2.1",
]

[project.scripts]
pip2conda = "pip2conda.pip2conda:main"

[project.urls]
"Bug Tracker" = "https://gitlab.com/gwpy/pip2conda/-/issues"
"Documentation" = "https://pip2conda.readthedocs.io"
"Homepage" = "https://gitlab.com/gwpy/pip2conda/"
"Source Code" = "https://gitlab.com/gwpy/pip2conda.git"

# -- tools --------

[tool.coverage.paths]
source = [
  "pip2conda/",
  "*/pip2conda/",
]

[tool.coverage.report]
exclude_lines = [
  # ignore when asked
  "pragma: no( |-)cover",
  # don't complain about typing blocks
  "if (typing\\.)?TYPE_CHECKING",
  # don't complain about __main__ blocks
  "if __name__ == '__main__'",
]
omit = [
  # don't report coverage for _version.py
  # (generated automatically by setuptools-scm)
  "*/_version.py",
]
# print report with one decimal point
precision = 1

[tool.mypy]
check_untyped_defs = true
exclude = [
  "^docs/",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "-r a"
filterwarnings = [
  "error",
  "ignore:Support for::setuptools",
  "ignore:.*pkg_resources",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN003",  # type annotations for **kwargs
  "D203",  # blank line before class docstring
  "D213",  # docstring summary on second line
  "D413",  # blank line after last section
  "ICN001",  # unconventional import alias
  "PLR0913",  # too many arguments
  "SIM108",  # if-else instead of ternary if
  "TID252",  # relative imports
]
# allow 'mock_...' variables to go unused in tests
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?)|mock_.*)$"

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "F401",  # unused-import
  "F403",  # undefined-local-with-import-star
  "I001",  # import order
]
"*/tests/*" = [
  "ANN",  # type annotations
  "B904",  # raise from
  "EM101",  # string literal in exception
  "PLR2004",  # magic value used in comparison
  "S101",  # assert
]
"docs/*" = [
  "A",  # builtins
  "ANN",  # type annotations
  "D",  # docstrings
  "INP001",  # implicit namespace package
]

[tool.setuptools]
license-files = [
  "LICENSE",
]

[tool.setuptools.packages.find]
# note: this is only required in CI, which otherwise fails because
#       someone is creating a temporary directory that setuptools
#       discovers as a nother top-level package
include = [
  "pip2conda*",
]

[tool.setuptools_scm]
write_to = "pip2conda/_version.py"
